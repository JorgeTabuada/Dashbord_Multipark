import { NextResponse } from 'next/server'
import { unifiedSync } from '@/lib/unified-sync'

export async function GET() {
  try {
    console.log('üß™ Iniciando teste de sincroniza√ß√£o unificada...')

    // 1. Obter estat√≠sticas
    const stats = await unifiedSync.getStats()
    
    console.log('üìä Estat√≠sticas obtidas:', {
      firebase: stats.firebase.connected ? '‚úÖ Conectado' : '‚ùå Erro',
      supabase: stats.supabase.connected ? '‚úÖ Conectado' : '‚ùå Erro',
      totalReservations: stats.supabase.total
    })

    // 2. Testar se consegue fazer uma sincroniza√ß√£o pequena (apenas 1 cidade/marca)
    let syncResult = null
    
    if (stats.firebase.connected && stats.supabase.connected) {
      try {
        console.log('üîÑ Testando sincroniza√ß√£o de Lisboa/Airpark...')
        syncResult = await unifiedSync.syncCityBrand('lisbon', 'airpark')
      } catch (syncError) {
        console.error('‚ùå Erro no teste de sincroniza√ß√£o:', syncError)
        syncResult = { success: 0, errors: 1, error: String(syncError) }
      }
    }

    return NextResponse.json({
      status: 'success',
      timestamp: new Date().toISOString(),
      test_results: {
        firebase_connection: stats.firebase.connected,
        supabase_connection: stats.supabase.connected,
        database_stats: stats.supabase,
        sync_test: syncResult,
        auto_sync_running: unifiedSync.isAutoSyncRunning()
      },
      message: stats.firebase.connected && stats.supabase.connected 
        ? '‚úÖ Todos os sistemas funcionais' 
        : '‚ö†Ô∏è Alguns sistemas com problemas'
    })

  } catch (error) {
    console.error('‚ùå Erro no teste:', error)
    
    return NextResponse.json({
      status: 'error',
      timestamp: new Date().toISOString(),
      error: String(error),
      message: '‚ùå Teste falhou'
    }, { status: 500 })
  }
}

// POST endpoint para for√ßar sincroniza√ß√£o completa
export async function POST(req: Request) {
  try {
    const body = await req.json()
    const { action } = body

    switch (action) {
      case 'sync_all':
        console.log('üåç Iniciando sincroniza√ß√£o completa for√ßada...')
        const fullSyncResult = await unifiedSync.syncAll()
        
        return NextResponse.json({
          status: 'success',
          action: 'sync_all',
          result: fullSyncResult,
          message: `Sincroniza√ß√£o completa: ${fullSyncResult.totalSuccess} sucessos, ${fullSyncResult.totalErrors} erros`
        })

      case 'sync_city':
        const { city, brand } = body
        if (!city || !brand) {
          return NextResponse.json({ error: 'Cidade e marca obrigat√≥rias' }, { status: 400 })
        }
        
        console.log(`üèôÔ∏è Sincronizando ${city}/${brand}...`)
        const citySyncResult = await unifiedSync.syncCityBrand(city, brand)
        
        return NextResponse.json({
          status: 'success',
          action: 'sync_city',
          city,
          brand,
          result: citySyncResult,
          message: `${city}/${brand}: ${citySyncResult.success} sucessos, ${citySyncResult.errors} erros`
        })

      case 'start_auto_sync':
        const { intervalMinutes = 5 } = body
        unifiedSync.startAutoSync(intervalMinutes)
        
        return NextResponse.json({
          status: 'success',
          action: 'start_auto_sync',
          intervalMinutes,
          message: `Sincroniza√ß√£o autom√°tica iniciada (${intervalMinutes} min)`
        })

      case 'stop_auto_sync':
        unifiedSync.stopAutoSync()
        
        return NextResponse.json({
          status: 'success',
          action: 'stop_auto_sync',
          message: 'Sincroniza√ß√£o autom√°tica parada'
        })

      default:
        return NextResponse.json({ error: 'A√ß√£o inv√°lida' }, { status: 400 })
    }

  } catch (error) {
    console.error('‚ùå Erro na a√ß√£o POST:', error)
    
    return NextResponse.json({
      status: 'error',
      error: String(error),
      message: 'Erro ao executar a√ß√£o'
    }, { status: 500 })
  }
}